#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"name":"csharp"}]}}

#!markdown

|**linked list**| **רשימה מקושרת** |
|---        |---            |
| `boolean contains(Node<Integer> node, int num)` |  האם מספר נמצא בתוך הרשימה |
| `int count(Node<String> node, int str)` | לספור מחרוזת מופאי של מחרוזת ברשימה |
| `boolean prefix(Node<Integer> l1, Node<Integer> l2)` | לבדוק האם רשימה היא תת רשימה תחילית |
| `boolean same(Node<Integer> l1, Node<Integer> l2)` | לבדוק האם שני רשימות זהות |
| `boolean sameStudents(Node<Student> l1, Node<Student> l2)` | לבדוק האם שתי רשימות מכילות אותם תלמידים |
| `Node<Integer> addToHead(Node<Integer> list, int num)` | הוסף לראש רשימה |
| `Node<Integer> addToTail(Node<Integer> list, int num)` | הוספ לסוף רשימה |
| `Node<Integer> addToOrdered(Node<Integer> list, int num)` | הוסף לרשימה ממויינת |
| `Node<Integer> removeFromHead(Node<Integer> list)` | הורד מראש מסימה |
| `Node<Integer> removeFromTail(Node<Integer> list)` | הורד מסוף רשימה |
| `Node<Integer> removeOne(Node<Integer> list, int num)` | להסיר מספר אחד מרשימה |
| `Node<Integer> removeAll(Node<Integer> list, int num)` | למצוא ולהסיר את כל מופעים של מספר |
| `findByName(Node<Student> node, String name)` | לחפס בשם ברשימה |
| - | - |
| **binary tree** | **עץ בינארי** |
| `int count(BinNode<T> node)` | לספור חוליות |
| `int count(BinNode<Integer> node, int num)` |  לספור חוליות המכילות מספר מסויים|
| `int countLeaves(BinNode<Integer> node)` | לספור אלים |
| `boolean contains(BinNode<Integer> node, int num)` | האם מספר נמצא בעץ |
| `boolean prefix(BinNode<Integer> node, Node<Integer> list)` | האם רשימה היא תחילית של עץ |
| `boolean prefix(BinNode<Character> node, String str)` | האם מחרוזת היא תחילית של עץ תווים |
| `boolean same(BinNode<Integer> l1, BinNode<Integer> l2)` | האם שני עצים זהים |
| `int depth(BinNode<Integer> node)` | לחשב את עומק העץ |
| `int findMinPath(BinNode<Integer> node)` | למצוא מסלול עם סכום מספרים מינימלי |
| `int findMaxPath(BinNode<Integer> node)` | למצוא מסלול עם סכום מספרים מקסימלי |
| `boolean isBalanced(BinNode<T> node)` | האם עץ מאוזן |
| `` |  |
| `` |  |
